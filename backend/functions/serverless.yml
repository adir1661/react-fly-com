
plugins:
  - serverless-finch
#  - serverless-plugin-optimize
custom:
  client:
    bucketName: flycomm-sis-front-end
  enable_optimize:
    local: false


service: sis-flycomm
package:
#  individually: true
  exclude:
    - node_modules/aws-sdk/*
    - client/**
    - my-artifacts/**


provider:
  name: aws
  runtime: nodejs8.10
  environment:
    REGION: ${self:provider.region}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    MONGODB_URI: mongodb+srv://database-admin:flytech57@flycomm-sis-aske2.mongodb.net/flycomm-sis?retryWrites=true # mongodb+srv://database-admin:flytech57@flycomm-sis-aske2.mongodb.net/test?retryWrites=true
  region: ${opt:region, 'eu-west-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
      - "s3:*"
      Resource: { "Fn::Join": ["", ["arn:aws:s3:::sis-flycomm-images", { "Ref": "ServerlessDeploymentBucket"} ] ] }
  stage: dev

functions:
  data:
    handler: handler.data
    events:
      - http:
          path: data/items
          method: get
  search:
    handler: handler.search
    events:
      - http:
         path: views/search_modal
         method: get
  database:
    handler: handler.database
    events:
    - http:
        path: database/test
        method: get
  create:
    handler: todos/create.create
    events:
    - http:
        path: todos
        method: post
        cors: true

  list:
    handler: todos/list.list
    events:
    - http:
        path: todos
        method: get
        cors: true

  get:
    handler: todos/get.get
    events:
    - http:
        path: todos/{id}
        method: get
        cors: true

  update:
    handler: todos/update.update
    events:
    - http:
        path: todos/{id}
        method: put
        cors: true
  delete:
    handler: todos/delete.delete
    events:
    - http:
        path: todos/{id}
        method: delete
        cors: true
  site-create:
    handler: sites/create.create
    optimize: ${self:custom.enable_optimize.${opt:stage,'dev'}, 'true'}
    events:
      - http:
         path: sites
         method: post
         cors: true
  site-list:
    handler: sites/list.list
    events:
    - http:
        path: sites
        method: get
        cors: true
    timeout: 60
  locations-list:
    handler: transformation/locations.list
    events:
    - http:
        path: locations
        method: get
        cors: true
    timeout: 60
  report-create:
    handler: reports/create.create
    events:
    - http:
        path: sites/{id}/reports
        method: post
        cors: true
  report-list:
    handler: reports/list.list
    events:
    - http:
        path: reports
        method: get
        cors: true
  upload-image:
    handler: images/image.site
    optimize: ${self:custom.enable_optimize.${opt:stage,'dev'}, 'true'}
    timeout: 60

resources:
  Resources:
#    TodosDynamoDbTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#        -
#          AttributeName: id
#          AttributeType: S
#        KeySchema:
#        -
#          AttributeName: id
#          KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'