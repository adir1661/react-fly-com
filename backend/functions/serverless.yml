# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
plugins:
  - serverless-finch
#  - serverless-plugin-optimize
custom:
  client:
    bucketName: flycomm-sis-front-end
  enable_optimize:
    local: false
service: sis-flycomm

package:
#  individually: true
  exclude:
    - node_modules/aws-sdk/*

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    SECRET_ACCESS_KEY: 7H/ufPaIVy7LHabB9Fn6Hun0v/FYNiGjfFJ4Q2p6
    ACCESS_KEY_ID: AKIAQMDFOWJCKNBPXEOK
    REGION: ${self:provider.region}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    MONGODB_URI: mongodb+srv://database-admin:flytech57@flycomm-sis-aske2.mongodb.net/flycomm-sis?retryWrites=true # mongodb+srv://database-admin:flytech57@flycomm-sis-aske2.mongodb.net/test?retryWrites=true
  region: ${opt:region, 'eu-west-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can overwrite defaults here
  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  data:
    handler: handler.data
    events:
      - http:
          path: data/items
          method: get
  search:
    handler: handler.search
    events:
      - http:
         path: views/search_modal
         method: get
  database:
    handler: handler.database
    events:
    - http:
        path: database/test
        method: get
  create:
    handler: todos/create.create
    events:
    - http:
        path: todos
        method: post
        cors: true

  list:
    handler: todos/list.list
    events:
    - http:
        path: todos
        method: get
        cors: true

  get:
    handler: todos/get.get
    events:
    - http:
        path: todos/{id}
        method: get
        cors: true

  update:
    handler: todos/update.update
    events:
    - http:
        path: todos/{id}
        method: put
        cors: true
  delete:
    handler: todos/delete.delete
    events:
    - http:
        path: todos/{id}
        method: delete
        cors: true
  site-create:
    handler: sites/create.create
    optimize: ${self:custom.enable_optimize.${opt:stage,'dev'}, 'true'}
    events:
      - http:
         path: sites
         method: post
         cors: true
  site-list:
    handler: sites/list.list
    events:
    - http:
        path: sites
        method: get
        cors: true
    timeout: 60
  locations-list:
    handler: transformation/locations.list
    events:
    - http:
        path: locations
        method: get
        cors: true
    timeout: 60
  report-create:
    handler: reports/create.create
    events:
    - http:
        path: sites/{id}/reports
        method: post
        cors: true
  report-list:
    handler: reports/list.list
    events:
    - http:
        path: reports
        method: get
        cors: true
  upload-image:
    handler: images/image.site
    optimize: ${self:custom.enable_optimize.${opt:stage,'dev'}, 'true'}
    timeout: 60


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'